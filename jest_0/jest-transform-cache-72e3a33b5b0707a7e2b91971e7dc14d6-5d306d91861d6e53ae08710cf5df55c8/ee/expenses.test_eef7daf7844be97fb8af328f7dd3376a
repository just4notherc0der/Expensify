00e666542d6007a7d0724cf9ce2ce60f
'use strict';var _expenses = require('../../selectors/expenses');var _expenses2 = _interopRequireDefault(_expenses);
var _moment = require('moment');var _moment2 = _interopRequireDefault(_moment);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// test data
var expenses = [
{
  id: '1',
  description: 'Gum',
  note: '',
  amount: 195,
  createdAt: 0 },

{
  id: '2',
  description: 'Rent',
  note: '',
  amount: 13395,
  createdAt: -1000
  // createdAt: moment(0).subtract(4, 'days').valueOf()
},
{
  id: '3',
  description: 'League of Legends',
  note: 'xD',
  amount: 627363,
  createdAt: 10000
  // createdAt: moment(0).add(4, 'days').valueOf()
}];



test('should filter by text value', function () {
  var filters = {
    text: 'e',
    sortBy: 'date',
    startDate: undefined,
    endDate: undefined };

  var result = (0, _expenses2.default)(expenses, filters);

  expect(result).toEqual([expenses[2], expenses[1]]);
});

/* DIFFERENT, DEBUG LATER
    test('should filter by start date', () => {
      const filters = {
        text: '',
        sortBy: 'date',
        startDate: moment(0),
        endDate: undefined
      };
      const result = selectExpenses(expenses, filters);
    
      expect(result).toEqual([ expenses[2], expenses[0] ]);
    });
    
    test('should filter by end date', () => {
      const filters = {
        text: '',
        sortBy: 'date',
        startDate: undefined,
        endDate: moment(0).add(2, 'days')
      };
      const result = selectExpenses(expenses, filters);
    
      expect(result).toEqual([ expenses[0], expenses[1] ]);
    });
    
    */

test('should sort by date', function () {
  var filters = {
    text: '',
    sortBy: 'date',
    startDate: undefined,
    endDate: undefined };

  var result = (0, _expenses2.default)(expenses, filters);

  expect(result).toEqual([expenses[2], expenses[0], expenses[1]]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cGVuc2VzLnRlc3QuanMiXSwibmFtZXMiOlsiZXhwZW5zZXMiLCJpZCIsImRlc2NyaXB0aW9uIiwibm90ZSIsImFtb3VudCIsImNyZWF0ZWRBdCIsInRlc3QiLCJmaWx0ZXJzIiwidGV4dCIsInNvcnRCeSIsInN0YXJ0RGF0ZSIsInVuZGVmaW5lZCIsImVuZERhdGUiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiYUFBQSxvRDtBQUNBLGdDOztBQUVBO0FBQ0EsSUFBTUEsV0FBVztBQUNmO0FBQ0VDLE1BQUksR0FETjtBQUVFQyxlQUFhLEtBRmY7QUFHRUMsUUFBTSxFQUhSO0FBSUVDLFVBQVEsR0FKVjtBQUtFQyxhQUFXLENBTGIsRUFEZTs7QUFRZjtBQUNFSixNQUFJLEdBRE47QUFFRUMsZUFBYSxNQUZmO0FBR0VDLFFBQU0sRUFIUjtBQUlFQyxVQUFRLEtBSlY7QUFLRUMsYUFBVyxDQUFDO0FBQ1o7QUFORixDQVJlO0FBZ0JmO0FBQ0VKLE1BQUksR0FETjtBQUVFQyxlQUFhLG1CQUZmO0FBR0VDLFFBQU0sSUFIUjtBQUlFQyxVQUFRLE1BSlY7QUFLRUMsYUFBVztBQUNYO0FBTkYsQ0FoQmUsQ0FBakI7Ozs7QUEyQkFDLEtBQUssNkJBQUwsRUFBb0MsWUFBTTtBQUN4QyxNQUFNQyxVQUFVO0FBQ2RDLFVBQU0sR0FEUTtBQUVkQyxZQUFRLE1BRk07QUFHZEMsZUFBV0MsU0FIRztBQUlkQyxhQUFTRCxTQUpLLEVBQWhCOztBQU1BLE1BQU1FLFNBQVMsd0JBQWViLFFBQWYsRUFBeUJPLE9BQXpCLENBQWY7O0FBRUFPLFNBQU9ELE1BQVAsRUFBZUUsT0FBZixDQUF1QixDQUFFZixTQUFTLENBQVQsQ0FBRixFQUFlQSxTQUFTLENBQVQsQ0FBZixDQUF2QjtBQUNELENBVkQ7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCQU0sS0FBSyxxQkFBTCxFQUE0QixZQUFNO0FBQ2hDLE1BQU1DLFVBQVU7QUFDZEMsVUFBTSxFQURRO0FBRWRDLFlBQVEsTUFGTTtBQUdkQyxlQUFXQyxTQUhHO0FBSWRDLGFBQVNELFNBSkssRUFBaEI7O0FBTUEsTUFBTUUsU0FBUyx3QkFBZWIsUUFBZixFQUF5Qk8sT0FBekIsQ0FBZjs7QUFFQU8sU0FBT0QsTUFBUCxFQUFlRSxPQUFmLENBQXVCLENBQUVmLFNBQVMsQ0FBVCxDQUFGLEVBQWVBLFNBQVMsQ0FBVCxDQUFmLEVBQTRCQSxTQUFTLENBQVQsQ0FBNUIsQ0FBdkI7QUFDRCxDQVZEIiwiZmlsZSI6ImV4cGVuc2VzLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2VsZWN0RXhwZW5zZXMgZnJvbSAnLi4vLi4vc2VsZWN0b3JzL2V4cGVuc2VzJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuLy8gdGVzdCBkYXRhXG5jb25zdCBleHBlbnNlcyA9IFtcbiAge1xuICAgIGlkOiAnMScsXG4gICAgZGVzY3JpcHRpb246ICdHdW0nLFxuICAgIG5vdGU6ICcnLFxuICAgIGFtb3VudDogMTk1LFxuICAgIGNyZWF0ZWRBdDogMFxuICB9LFxuICB7XG4gICAgaWQ6ICcyJyxcbiAgICBkZXNjcmlwdGlvbjogJ1JlbnQnLFxuICAgIG5vdGU6ICcnLFxuICAgIGFtb3VudDogMTMzOTUsXG4gICAgY3JlYXRlZEF0OiAtMTAwMCxcbiAgICAvLyBjcmVhdGVkQXQ6IG1vbWVudCgwKS5zdWJ0cmFjdCg0LCAnZGF5cycpLnZhbHVlT2YoKVxuICB9LFxuICB7XG4gICAgaWQ6ICczJyxcbiAgICBkZXNjcmlwdGlvbjogJ0xlYWd1ZSBvZiBMZWdlbmRzJyxcbiAgICBub3RlOiAneEQnLFxuICAgIGFtb3VudDogNjI3MzYzLFxuICAgIGNyZWF0ZWRBdDogMTAwMDAsXG4gICAgLy8gY3JlYXRlZEF0OiBtb21lbnQoMCkuYWRkKDQsICdkYXlzJykudmFsdWVPZigpXG4gIH0sXG5dXG5cblxudGVzdCgnc2hvdWxkIGZpbHRlciBieSB0ZXh0IHZhbHVlJywgKCkgPT4ge1xuICBjb25zdCBmaWx0ZXJzID0ge1xuICAgIHRleHQ6ICdlJyxcbiAgICBzb3J0Qnk6ICdkYXRlJyxcbiAgICBzdGFydERhdGU6IHVuZGVmaW5lZCxcbiAgICBlbmREYXRlOiB1bmRlZmluZWRcbiAgfTtcbiAgY29uc3QgcmVzdWx0ID0gc2VsZWN0RXhwZW5zZXMoZXhwZW5zZXMsIGZpbHRlcnMpO1xuXG4gIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoWyBleHBlbnNlc1syXSwgZXhwZW5zZXNbMV0gXSk7XG59KTtcblxuLyogRElGRkVSRU5ULCBERUJVRyBMQVRFUlxudGVzdCgnc2hvdWxkIGZpbHRlciBieSBzdGFydCBkYXRlJywgKCkgPT4ge1xuICBjb25zdCBmaWx0ZXJzID0ge1xuICAgIHRleHQ6ICcnLFxuICAgIHNvcnRCeTogJ2RhdGUnLFxuICAgIHN0YXJ0RGF0ZTogbW9tZW50KDApLFxuICAgIGVuZERhdGU6IHVuZGVmaW5lZFxuICB9O1xuICBjb25zdCByZXN1bHQgPSBzZWxlY3RFeHBlbnNlcyhleHBlbnNlcywgZmlsdGVycyk7XG5cbiAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbIGV4cGVuc2VzWzJdLCBleHBlbnNlc1swXSBdKTtcbn0pO1xuXG50ZXN0KCdzaG91bGQgZmlsdGVyIGJ5IGVuZCBkYXRlJywgKCkgPT4ge1xuICBjb25zdCBmaWx0ZXJzID0ge1xuICAgIHRleHQ6ICcnLFxuICAgIHNvcnRCeTogJ2RhdGUnLFxuICAgIHN0YXJ0RGF0ZTogdW5kZWZpbmVkLFxuICAgIGVuZERhdGU6IG1vbWVudCgwKS5hZGQoMiwgJ2RheXMnKVxuICB9O1xuICBjb25zdCByZXN1bHQgPSBzZWxlY3RFeHBlbnNlcyhleHBlbnNlcywgZmlsdGVycyk7XG5cbiAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbIGV4cGVuc2VzWzBdLCBleHBlbnNlc1sxXSBdKTtcbn0pO1xuXG4qL1xuXG50ZXN0KCdzaG91bGQgc29ydCBieSBkYXRlJywgKCkgPT4ge1xuICBjb25zdCBmaWx0ZXJzID0ge1xuICAgIHRleHQ6ICcnLFxuICAgIHNvcnRCeTogJ2RhdGUnLFxuICAgIHN0YXJ0RGF0ZTogdW5kZWZpbmVkLFxuICAgIGVuZERhdGU6IHVuZGVmaW5lZFxuICB9O1xuICBjb25zdCByZXN1bHQgPSBzZWxlY3RFeHBlbnNlcyhleHBlbnNlcywgZmlsdGVycyk7XG5cbiAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChbIGV4cGVuc2VzWzJdLCBleHBlbnNlc1swXSwgZXhwZW5zZXNbMV0gXSk7XG59KTtcbiJdfQ==