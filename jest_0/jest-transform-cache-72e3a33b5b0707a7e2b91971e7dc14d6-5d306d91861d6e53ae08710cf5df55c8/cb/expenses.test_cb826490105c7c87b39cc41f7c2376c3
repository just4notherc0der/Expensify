a691c27b2fe7692c8a147162837566c6
'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _expenses = require('../../actions/expenses');

// removeExpense
test('should setup remove expense action object', function () {
  var action = (0, _expenses.removeExpense)({ id: '123abc' });
  /* This test will ail because toBe compares 2 values with ===, and 2 objects are never the same when comared with === operator
                                                               expect(action).toBe({
                                                                 type: 'REMOVE_EXPENSE',
                                                                 id: '123abc'
                                                               });*/
  expect(action).toEqual({
    type: 'REMOVE_EXPENSE',
    id: '123abc' });

});

// editExpense
test('should setup edit expense action object', function () {
  var action = (0, _expenses.editExpense)('someID123', { note: 'Now Note' });
  expect(action).toEqual({
    type: 'EDIT_EXPENSE',
    id: 'someID123',
    updates: {
      note: 'Now Note' } });


});

// addExpense
test('Should setup add expense action object with provided values', function () {
  var expenseData = {
    description: 'Rent',
    amount: 102800,
    createdAt: 1000,
    note: 'This was last months rent' };

  var action = (0, _expenses.addExpense)(expenseData);

  expect(action).toEqual({
    type: 'ADD_EXPENSE',
    expense: _extends({},
    expenseData, {
      id: expect.any(String) // because id is dynamically assigned
    }) });

});

/*
    test('Should setup add expense action object with default values', () => {
      const expenseData = {
        description: '',
        note: '',
        amount: 0,
        createdAt: 0
      };
      const action = addExpense();
    
      expect(action)toEqual({
        type: 'ADD_EXPENSE',
        expense: {
          ...expenseData,
          id: expect.any(String)
        }
      });
    });
    */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cGVuc2VzLnRlc3QuanMiXSwibmFtZXMiOlsidGVzdCIsImFjdGlvbiIsImlkIiwiZXhwZWN0IiwidG9FcXVhbCIsInR5cGUiLCJub3RlIiwidXBkYXRlcyIsImV4cGVuc2VEYXRhIiwiZGVzY3JpcHRpb24iLCJhbW91bnQiLCJjcmVhdGVkQXQiLCJleHBlbnNlIiwiYW55IiwiU3RyaW5nIl0sIm1hcHBpbmdzIjoib1FBQUE7O0FBRUE7QUFDQUEsS0FBSywyQ0FBTCxFQUFrRCxZQUFNO0FBQ3RELE1BQU1DLFNBQVMsNkJBQWMsRUFBRUMsSUFBSSxRQUFOLEVBQWQsQ0FBZjtBQUNBOzs7OztBQUtBQyxTQUFPRixNQUFQLEVBQWVHLE9BQWYsQ0FBdUI7QUFDckJDLFVBQU0sZ0JBRGU7QUFFckJILFFBQUksUUFGaUIsRUFBdkI7O0FBSUQsQ0FYRDs7QUFhQTtBQUNBRixLQUFLLHlDQUFMLEVBQWdELFlBQU07QUFDcEQsTUFBTUMsU0FBUywyQkFBWSxXQUFaLEVBQXlCLEVBQUVLLE1BQU0sVUFBUixFQUF6QixDQUFmO0FBQ0FILFNBQU9GLE1BQVAsRUFBZUcsT0FBZixDQUF1QjtBQUNyQkMsVUFBTSxjQURlO0FBRXJCSCxRQUFJLFdBRmlCO0FBR3JCSyxhQUFTO0FBQ1BELFlBQU0sVUFEQyxFQUhZLEVBQXZCOzs7QUFPRCxDQVREOztBQVdBO0FBQ0FOLEtBQUssNkRBQUwsRUFBb0UsWUFBTTtBQUN4RSxNQUFNUSxjQUFjO0FBQ2xCQyxpQkFBYSxNQURLO0FBRWxCQyxZQUFRLE1BRlU7QUFHbEJDLGVBQVcsSUFITztBQUlsQkwsVUFBTSwyQkFKWSxFQUFwQjs7QUFNQSxNQUFNTCxTQUFTLDBCQUFXTyxXQUFYLENBQWY7O0FBRUFMLFNBQU9GLE1BQVAsRUFBZUcsT0FBZixDQUF1QjtBQUNyQkMsVUFBTSxhQURlO0FBRXJCTztBQUNLSixlQURMO0FBRUVOLFVBQUlDLE9BQU9VLEdBQVAsQ0FBV0MsTUFBWCxDQUZOLENBRXlCO0FBRnpCLE1BRnFCLEVBQXZCOztBQU9ELENBaEJEOztBQWtCQSIsImZpbGUiOiJleHBlbnNlcy50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkRXhwZW5zZSwgZWRpdEV4cGVuc2UsIHJlbW92ZUV4cGVuc2UgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2V4cGVuc2VzJztcblxuLy8gcmVtb3ZlRXhwZW5zZVxudGVzdCgnc2hvdWxkIHNldHVwIHJlbW92ZSBleHBlbnNlIGFjdGlvbiBvYmplY3QnLCAoKSA9PiB7XG4gIGNvbnN0IGFjdGlvbiA9IHJlbW92ZUV4cGVuc2UoeyBpZDogJzEyM2FiYycgfSk7XG4gIC8qIFRoaXMgdGVzdCB3aWxsIGFpbCBiZWNhdXNlIHRvQmUgY29tcGFyZXMgMiB2YWx1ZXMgd2l0aCA9PT0sIGFuZCAyIG9iamVjdHMgYXJlIG5ldmVyIHRoZSBzYW1lIHdoZW4gY29tYXJlZCB3aXRoID09PSBvcGVyYXRvclxuICBleHBlY3QoYWN0aW9uKS50b0JlKHtcbiAgICB0eXBlOiAnUkVNT1ZFX0VYUEVOU0UnLFxuICAgIGlkOiAnMTIzYWJjJ1xuICB9KTsqL1xuICBleHBlY3QoYWN0aW9uKS50b0VxdWFsKHtcbiAgICB0eXBlOiAnUkVNT1ZFX0VYUEVOU0UnLFxuICAgIGlkOiAnMTIzYWJjJ1xuICB9KTtcbn0pO1xuXG4vLyBlZGl0RXhwZW5zZVxudGVzdCgnc2hvdWxkIHNldHVwIGVkaXQgZXhwZW5zZSBhY3Rpb24gb2JqZWN0JywgKCkgPT4ge1xuICBjb25zdCBhY3Rpb24gPSBlZGl0RXhwZW5zZSgnc29tZUlEMTIzJywgeyBub3RlOiAnTm93IE5vdGUnIH0pO1xuICBleHBlY3QoYWN0aW9uKS50b0VxdWFsKHtcbiAgICB0eXBlOiAnRURJVF9FWFBFTlNFJyxcbiAgICBpZDogJ3NvbWVJRDEyMycsXG4gICAgdXBkYXRlczoge1xuICAgICAgbm90ZTogJ05vdyBOb3RlJ1xuICAgIH1cbiAgfSk7XG59KTtcblxuLy8gYWRkRXhwZW5zZVxudGVzdCgnU2hvdWxkIHNldHVwIGFkZCBleHBlbnNlIGFjdGlvbiBvYmplY3Qgd2l0aCBwcm92aWRlZCB2YWx1ZXMnLCAoKSA9PiB7XG4gIGNvbnN0IGV4cGVuc2VEYXRhID0ge1xuICAgIGRlc2NyaXB0aW9uOiAnUmVudCcsXG4gICAgYW1vdW50OiAxMDI4MDAsXG4gICAgY3JlYXRlZEF0OiAxMDAwLFxuICAgIG5vdGU6ICdUaGlzIHdhcyBsYXN0IG1vbnRocyByZW50J1xuICB9O1xuICBjb25zdCBhY3Rpb24gPSBhZGRFeHBlbnNlKGV4cGVuc2VEYXRhKTtcblxuICBleHBlY3QoYWN0aW9uKS50b0VxdWFsKHtcbiAgICB0eXBlOiAnQUREX0VYUEVOU0UnLFxuICAgIGV4cGVuc2U6IHtcbiAgICAgIC4uLmV4cGVuc2VEYXRhLFxuICAgICAgaWQ6IGV4cGVjdC5hbnkoU3RyaW5nKSAvLyBiZWNhdXNlIGlkIGlzIGR5bmFtaWNhbGx5IGFzc2lnbmVkXG4gICAgfVxuICB9KTtcbn0pO1xuXG4vKlxudGVzdCgnU2hvdWxkIHNldHVwIGFkZCBleHBlbnNlIGFjdGlvbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHZhbHVlcycsICgpID0+IHtcbiAgY29uc3QgZXhwZW5zZURhdGEgPSB7XG4gICAgZGVzY3JpcHRpb246ICcnLFxuICAgIG5vdGU6ICcnLFxuICAgIGFtb3VudDogMCxcbiAgICBjcmVhdGVkQXQ6IDBcbiAgfTtcbiAgY29uc3QgYWN0aW9uID0gYWRkRXhwZW5zZSgpO1xuXG4gIGV4cGVjdChhY3Rpb24pdG9FcXVhbCh7XG4gICAgdHlwZTogJ0FERF9FWFBFTlNFJyxcbiAgICBleHBlbnNlOiB7XG4gICAgICAuLi5leHBlbnNlRGF0YSxcbiAgICAgIGlkOiBleHBlY3QuYW55KFN0cmluZylcbiAgICB9XG4gIH0pO1xufSk7XG4qL1xuIl19